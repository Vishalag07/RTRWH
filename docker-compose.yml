version: '3.9'

services:
  db:
    image: postgis/postgis:16-3.4
    container_name: rtrwh-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-rtrwh}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - rtrwh-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rtrwh-backend
    env_file:
      - ./.env
    environment:
      DATABASE_URL: postgresql+psycopg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-rtrwh}
      PYTHONPATH: /app
    ports:
      - "8000:8000"
    volumes:
      - ./backend/app:/app/app:ro
      - backend_logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - rtrwh-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE: ${VITE_API_BASE:-http://localhost:8000/api}
        VITE_APP_NAME: ${VITE_APP_NAME:-RTRWH}
        VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0}
    container_name: rtrwh-frontend
    env_file:
      - ./.env
    ports:
      - "3000:3000"
      - "5173:5173"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - rtrwh-network

  # Optional: Redis for caching (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: rtrwh-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped
  #   networks:
  #     - rtrwh-network

  # Optional: Nginx reverse proxy (uncomment if needed)
  # nginx:
  #   image: nginx:alpine
  #   container_name: rtrwh-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - frontend
  #     - backend
  #   restart: unless-stopped
  #   networks:
  #     - rtrwh-network

volumes:
  db_data:
    driver: local
  backend_logs:
    driver: local
  # redis_data:
  #   driver: local

networks:
  rtrwh-network:
    driver: bridge


